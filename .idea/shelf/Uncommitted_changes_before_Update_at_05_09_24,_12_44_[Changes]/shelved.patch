Index: frontend/content.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// content.js\n\nfunction loadStyles() {\n  const link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.type = 'text/css';\n  link.href = chrome.runtime.getURL('styles.css');\n  document.head.appendChild(link);\n}\n\nloadStyles();\n\nlet commentIntervalId = null;\nlet isCommentingEnabled = false;\nlet countdownIntervalId = null;\n\nfunction createSidebar() {\n  const sidebar = document.createElement('div');\n  sidebar.id = 'linkedin-interaction-sidebar';\n  sidebar.innerHTML = `\n    <div id=\"sidebar-header\">\n      <h2>LinkedIn Interactions</h2>\n    </div>\n    <form>\n      <div>\n        <label for=\"comment\">Comment on Influenced Post</label>\n        <label class=\"switch\">\n          <input type=\"checkbox\" id=\"comment\">\n          <span class=\"slider\"></span>\n        </label>\n      </div>\n      <div id=\"comment-interval-container\" style=\"display: none;\">\n        <label for=\"comment-interval\">Interval (mins)</label>\n        <input type=\"number\" id=\"comment-interval\" min=\"1\">\n      </div>\n      <button id=\"save\" disabled>Save</button>\n      <p id=\"status-message\" style=\"display: none;\">Next run in: <span id=\"countdown-timer\">00:00</span></p>\n    </form>\n  `;\n  document.body.appendChild(sidebar);\n\n  makeDraggable(sidebar);\n\n  const saveButton = sidebar.querySelector('#save');\n  const commentCheckbox = sidebar.querySelector('#comment');\n  const intervalContainer = sidebar.querySelector('#comment-interval-container');\n  const intervalInput = sidebar.querySelector('#comment-interval');\n  const statusMessage = sidebar.querySelector('#status-message');\n  const countdownTimer = sidebar.querySelector('#countdown-timer');\n\n  function handleToggleChange() {\n    if (commentCheckbox.checked) {\n      intervalContainer.style.display = 'block';\n      saveButton.disabled = !intervalInput.value;\n      statusMessage.style.display = 'none';\n    } else {\n      intervalContainer.style.display = 'none';\n      intervalInput.value = '';\n      saveButton.disabled = false;\n      statusMessage.style.display = 'none';\n    }\n  }\n\n  commentCheckbox.addEventListener('change', handleToggleChange);\n\n  saveButton.addEventListener('click', (e) => {\n    e.preventDefault();\n    const commentChecked = commentCheckbox.checked;\n\n    if (commentChecked) {\n      const commentInterval = parseInt(intervalInput.value, 10);\n      if (commentInterval > 0) {\n        localStorage.setItem('commentInterval', commentInterval);\n        startCommenting(commentInterval);\n        saveButton.disabled = true;\n        statusMessage.style.display = 'block';\n        startCountdown(commentInterval * 60);\n      } else {\n        alert('Please enter a valid interval greater than 0.');\n        return;\n      }\n    } else {\n      stopCommenting();\n      statusMessage.style.display = 'none';\n    }\n\n    saveButton.disabled = true;\n  });\n\n  intervalInput.addEventListener('input', () => {\n    saveButton.disabled = intervalInput.value.trim() === '';\n  });\n}\nfunction makeDraggable(element) {\n  let isDragging = false;\n  let currentX;\n  let currentY;\n  let initialX;\n  let initialY;\n  let xOffset = 0;\n  let yOffset = 0;\n\n  const header = element.querySelector('#sidebar-header');\n  header.addEventListener('mousedown', dragStart);\n  document.addEventListener('mousemove', drag);\n  document.addEventListener('mouseup', dragEnd);\n\n  function dragStart(e) {\n    initialX = e.clientX - xOffset;\n    initialY = e.clientY - yOffset;\n\n    if (e.target === header) {\n      isDragging = true;\n    }\n  }\n\n  function drag(e) {\n    if (isDragging) {\n      e.preventDefault();\n      currentX = e.clientX - initialX;\n      currentY = e.clientY - initialY;\n\n      xOffset = currentX;\n      yOffset = currentY;\n\n      setTranslate(currentX, currentY, element);\n    }\n  }\n\n  function dragEnd(e) {\n    initialX = currentX;\n    initialY = currentY;\n\n    isDragging = false;\n  }\n\n  function setTranslate(xPos, yPos, el) {\n    el.style.transform = `translate3d(${xPos}px, ${yPos}px, 0)`;\n  }\n}\n\nfunction startCommenting(minutes) {\n  if (commentIntervalId) {\n    clearInterval(commentIntervalId);\n  }\n  const intervalMillis = minutes * 60 * 1000;\n  isCommentingEnabled = true;\n  commentIntervalId = setInterval(() => {\n    if (isCommentingEnabled) {\n      readLinkedInPageAndComment();\n      startCountdown(minutes * 60);\n    }\n  }, intervalMillis);\n}\n\nfunction stopCommenting() {\n  isCommentingEnabled = false;\n  if (commentIntervalId) {\n    clearInterval(commentIntervalId);\n    commentIntervalId = null;\n  }\n  if (countdownIntervalId) {\n    clearInterval(countdownIntervalId);\n    countdownIntervalId = null;\n  }\n  document.querySelector('#countdown-timer').textContent = '00:00';\n}\n\nfunction startCountdown(seconds) {\n  if (countdownIntervalId) {\n    clearInterval(countdownIntervalId);\n  }\n\n  const countdownTimer = document.querySelector('#countdown-timer');\n\n  function updateCountdown() {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    countdownTimer.textContent = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n\n    if (seconds > 0) {\n      seconds--;\n    } else {\n      clearInterval(countdownIntervalId);\n    }\n  }\n\n  updateCountdown();\n  countdownIntervalId = setInterval(updateCountdown, 1000);\n}\n// Call createSidebar when the content script loads\ncreateSidebar();
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/content.js b/frontend/content.js
--- a/frontend/content.js	(revision f67489946c537b5a3ba53b1a729a0389a8216196)
+++ b/frontend/content.js	(date 1725532976061)
@@ -188,5 +188,5 @@
   updateCountdown();
   countdownIntervalId = setInterval(updateCountdown, 1000);
 }
-// Call createSidebar when the content script loads
+// Call createSidebar when the content script loadsmm
 createSidebar();
\ No newline at end of file
